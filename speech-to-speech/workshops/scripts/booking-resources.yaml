AWSTemplateFormatVersion: '2010-09-09'
Description: 'Booking System Resources for Nova S2S Workshop'

Parameters:
  LambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Lambda function code package
  
  LambdaCodeS3Key:
    Type: String
    Description: S3 key for the Lambda function code package
  
  LambdaRuntime:
    Type: String
    Default: python3.9
    Description: Runtime for the Lambda function
  
  LambdaTimeout:
    Type: Number
    Default: 30
    Description: Timeout for the Lambda function in seconds
  
  LambdaMemory:
    Type: Number
    Default: 256
    Description: Memory allocation for the Lambda function in MB

Resources:
  # DynamoDB Table
  BookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Bookings
      AttributeDefinitions:
        - AttributeName: booking_id
          AttributeType: S
      KeySchema:
        - AttributeName: booking_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # IAM Role for Lambda
  BookingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BookingLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                  - dynamodb:CreateTable
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Bookings
              - Effect: Allow
                Action:
                  - dynamodb:ListTables
                Resource: '*'

  # Lambda Function
  BookingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BookingFunction
      Runtime: !Ref LambdaRuntime
      Handler: booking.booking_lambda.lambda_handler
      Role: !GetAtt BookingLambdaRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Environment:
        Variables:
          TABLE_NAME: Bookings

  # Lambda Permission for Bedrock
  BedrockInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BookingFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  # Bedrock Execution Role
  BedrockExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BedrockExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt BookingFunction.Arn

Outputs:
  BookingLambdaArn:
    Description: ARN of the Booking Lambda function
    Value: !GetAtt BookingFunction.Arn
  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref BookingsTable
  BedrockExecutionRoleArn:
    Description: ARN of the Bedrock Execution Role
    Value: !GetAtt BedrockExecutionRole.Arn
